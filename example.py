# from permutations import Permutation, PegPerm
from gridclasses import PolyClass, Permutation, PegPerm

# TODO you can make perm where signs arent in range(b), fix that
# TODO check that decorator list is treated consistently throughout code

# # creating permutation demo
# p = Permutation((1, 3, 2), (0, 2, 1), 3)
# print(p)
#
# # peg permutations generated by prefix reversals example
# s = PegPerm.sort_pr(3, 2)
# for e in s:
#     print(e)
#
# # compact demo
# p = PegPerm(Permutation((1, 3, 2), (0, 0, 0), 2), [0,0,0])
# print(p.is_compact())
# p = PegPerm(Permutation((1, 3, 2), (0, 0, 0), 2), [0,-1,-1])
# print(p.is_compact())
#
# # clean demo
# p = PegPerm(Permutation((1, 3, 2), (0, 0, 0), 2), [0,0,0])
# for e in p.clean():
#     print(e)
# p = PegPerm(Permutation((1, 3, 2), (0, 0, 1), 2), [0,0,0])
# for e in p.clean():
#     print(e)

# IMPORTANT STUFF

# here the 2 different entries are semi-disjoint because they have different decorators (+ and -)
p = Permutation((1, 2), (0, 0), 2)
pp = PegPerm(p, [1, -1])
Pi = PolyClass(pp)
print(Pi.polynomial())

# here the 2 different entries are fully disjoint because they have different signs (0 and 1)
p = Permutation((1, 2), (0, 1), 2)
pp = PegPerm(p, [1, 1])
Pi = PolyClass(pp)
print(Pi.polynomial())

# here the 2 different entries may as well be the same thing
p = Permutation((1, 2), (0, 0), 2)
pp = PegPerm(p, [1, 1])
Pi = PolyClass(pp)
print(Pi.polynomial())


# example you asked for
s = PegPerm.sort_pr(1, 3)
print(s)
Pi = PolyClass(s)
print(Pi.polynomial())


